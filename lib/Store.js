// Generated by CoffeeScript 1.3.3
(function() {
  var Base, Collection, Store, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('./core'), Base = _ref.Base, Collection = _ref.Collection;

  _ = require('underscore');

  Store = (function(_super) {

    __extends(Store, _super);

    Store.define("type", {
      get: function() {
        return this.config.type;
      }
    });

    function Store(config) {
      Store.__super__.constructor.call(this, config);
      this.models = {};
    }

    Store.prototype.registerModel = function(model) {
      var _this = this;
      model.on('statechange:Dirty', function(model) {
        return _this.onModelDirty(model);
      });
      model.on('statechange:New', function(model) {
        return _this.onModelNew(model);
      });
      if (!model.get('id')) {
        model.generateId();
      }
      this.models[model.id] = model;
      return this.emit("add", model);
    };

    Store.prototype.resolve = function(obj, metadata, initialState) {
      var item, model;
      if (initialState == null) {
        initialState = null;
      }
      if (_.isArray(obj)) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            item = obj[_i];
            _results.push(this.resolve(item));
          }
          return _results;
        }).call(this);
      }
      if (obj instanceof Collection) {
        return (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = obj.length; _i < _len; _i++) {
            item = obj[_i];
            _results.push(this.resolve(item));
          }
          return _results;
        }).call(this);
      }
      if (obj instanceof this.type) {
        return obj;
      }
      if (_.isNumber(obj)) {
        obj = {
          id: Number(obj)
        };
      }
      if (obj.id) {
        model = this.get(obj.id);
      }
      if (model) {
        model.parse(obj, metadata);
      } else {
        if (initialState === null) {
          initialState = obj.id != null ? "Existing" : "New";
        }
        model = new this.type({
          data: obj,
          state: initialState
        });
      }
      return model;
    };

    Store.prototype.create = function(data, metadata) {
      return this.resolve(data, metadata, 'New');
    };

    Store.prototype.get = function(id) {
      return this.models[id] || null;
    };

    Store.prototype.find = function(query) {};

    Store.prototype["delete"] = function(modelOrId) {
      var model;
      model = modelOrId instanceof this.type ? modelOrId : this.get(modelOrId);
      if (!model) {
        return;
      }
      delete this.models[model.id];
      this.emit("deleting", model);
      return model.dispose();
    };

    return Store;

  })(Base);

  module.exports = Store;

}).call(this);
