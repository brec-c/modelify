// Generated by CoffeeScript 1.3.3
(function() {
  var Base, Collection, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  Base = require('./Base');

  _ = require('underscore');

  Collection = (function(_super) {

    __extends(Collection, _super);

    Collection.define("lastPos", {
      get: function() {
        return Math.max(this.length - 1, 0);
      }
    });

    Collection.define('last', {
      get: function() {
        return this[this.lastPos];
      }
    });

    Collection.define('first', {
      get: function() {
        return this[0];
      }
    });

    function Collection(config) {
      var _ref,
        _this = this;
      Collection.__super__.constructor.call(this, config);
      this.length = 0;
      if (((_ref = this.config.sort) != null ? _ref.by : void 0) != null) {
        if ((this.config.sort.dir != null) && this.config.sort.dir === 'desc') {
          this.comparator = function(a, b) {
            if (a[_this.config.sort.by] > b[_this.config.sort.by]) {
              return -1;
            } else {
              return 1;
            }
          };
        } else {
          this.comparator = function(a, b) {
            if (a[_this.config.sort.by] < b[_this.config.sort.by]) {
              return -1;
            } else {
              return 1;
            }
          };
        }
      } else if (this.config.comparator) {
        this.comparator = this.config.comparator;
      }
      if (this.config.items != null) {
        this.addAll(this.config.items);
      }
    }

    Collection.prototype.clone = function() {
      return new Collection({
        items: this
      });
    };

    Collection.prototype.add = function(item, index) {
      var tail;
      if (index == null) {
        index = null;
      }
      if (index === null || index === this.length) {
        index = this.length;
        this[index] = item;
        this.length++;
      } else {
        if (typeof index !== 'number' || index < 0) {
          throw new Error("Bad index " + index);
        }
        tail = this.rest(index);
        this[index] = item;
        this.length++;
        this._reattach(tail, index + 1);
      }
      if (this.comparator) {
        this.sort();
      }
      this.onAdd(item, this.indexOf(item));
      return this;
    };

    Collection.prototype.sort = function() {
      var arr, hasChanged, pos, value, _i, _len;
      arr = this.toArray();
      arr.sort(this.comparator);
      hasChanged = false;
      for (pos = _i = 0, _len = arr.length; _i < _len; pos = ++_i) {
        value = arr[pos];
        if (this[pos] !== value) {
          this[pos] = value;
          hasChanged = true;
        }
      }
      return hasChanged;
    };

    Collection.prototype.addAll = function(collection) {
      var item, _i, _len;
      for (_i = 0, _len = collection.length; _i < _len; _i++) {
        item = collection[_i];
        this.add(item);
      }
      return this;
    };

    Collection.prototype.isEqual = function(collection) {
      var index, item, _i, _len;
      if (!collection) {
        return false;
      }
      if (this.length !== collection.length) {
        return false;
      }
      for (index = _i = 0, _len = collection.length; _i < _len; index = ++_i) {
        item = collection[index];
        if (item !== this[index]) {
          return false;
        }
      }
      return true;
    };

    Collection.prototype.isEmpty = function() {
      return this.length === 0;
    };

    Collection.prototype.equals = function(other) {
      return _.isEqual(this, other);
    };

    Collection.prototype.insert = function(item, index) {
      return this.add(item, index);
    };

    Collection.prototype.remove = function(item) {
      var index;
      index = this.indexOf(item);
      if (index === -1) {
        return void 0;
      } else {
        return this.removeAt(index);
      }
    };

    Collection.prototype.removeAt = function(index) {
      var item, tail;
      if (index < 0 || index > this.length - 1) {
        return void 0;
      }
      item = this[index];
      delete this[index];
      tail = this.rest(index + 1);
      this._reattach(tail, index);
      delete this[this.length];
      this.length--;
      this.onRemove(item, index);
      return item;
    };

    Collection.prototype.removeAll = function() {
      var index, _i, _ref;
      for (index = _i = _ref = this.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; index = _ref <= 0 ? ++_i : --_i) {
        this.removeAt(index);
      }
      return this;
    };

    Collection.prototype.move = function(oldIndex, newIndex) {
      var item;
      throw new Error("Can't move items in a sorted collection");
      if (oldIndex === newIndex) {
        return this[oldIndex];
      }
      if (oldIndex >= this.length) {
        throw new Error("Can't move item from out-of-bounds index " + oldIndex + " (Collection contains " + this.length + " items.)");
      }
      if (newIndex >= this.length) {
        throw new Error("Can't move item to out-of-bounds index " + newIndex + " (Collection contains " + this.length + " items.)");
      }
      item = this.removeAt(oldIndex);
      this.insert(item, newIndex);
      return item;
    };

    Collection.prototype.push = function(item) {
      return this.add(item);
    };

    Collection.prototype.pop = function() {
      if (this.length === 0) {
        return void 0;
      } else {
        return this.removeAt(this.length - 1);
      }
    };

    Collection.prototype.shift = function() {
      if (this.length === 0) {
        return void 0;
      } else {
        return this.removeAt(0);
      }
    };

    Collection.prototype.unshift = function(item) {
      return this.insert(item, 0);
    };

    Collection.prototype.toArray = function() {
      return this.values();
    };

    Collection.prototype.join = function(separator) {
      if (separator == null) {
        separator = ', ';
      }
      return this.toArray().join(separator);
    };

    Collection.prototype.onAdd = function(item, index) {
      this.emit('add', item, index);
      return this.emit('change');
    };

    Collection.prototype.onRemove = function(item, index) {
      this.emit('remove', item, index);
      return this.emit('change');
    };

    Collection.prototype._reattach = function(tail, index) {
      var obj, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tail.length; _i < _len; _i++) {
        obj = tail[_i];
        _results.push(this[index++] = obj);
      }
      return _results;
    };

    Collection.underscoreProxyMethods = ['all', 'any', 'compact', 'contains', 'detect', 'difference', 'each', 'every', 'filter', 'find', 'first', 'flatten', 'forEach', 'groupBy', 'include', 'indexOf', 'intersection', 'invoke', 'last', 'lastIndexOf', 'map', 'max', 'min', 'pluck', 'range', 'reduce', 'reduceRight', 'reject', 'rest', 'select', 'size', 'some', 'union', 'uniq', 'without', 'values', 'zip'];

    Collection.loadProxyMethods = function() {
      var _this = this;
      return _.each(this.underscoreProxyMethods, function(method) {
        return _this.prototype[method] = function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return _[method].apply(_, [this].concat(args));
        };
      });
    };

    Collection.loadProxyMethods();

    return Collection;

  })(Base);

  module.exports = Collection;

}).call(this);
