// Generated by CoffeeScript 1.3.3
(function() {
  var Collection, ModelQuery,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Collection = require('./core').Collection;

  ModelQuery = (function(_super) {

    __extends(ModelQuery, _super);

    function ModelQuery(config) {
      ModelQuery.__super__.constructor.call(this, config);
      this.store = this.config.store;
      if (this.config.where) {
        this.where(this.config.where);
      } else {
        this.filter = function(model) {
          return true;
        };
      }
      if (this.config.runNow) {
        this.run();
      }
    }

    ModelQuery.prototype.dispose = function() {
      var _this = this;
      this.removeAll();
      this.store.removeListener('add', function() {
        return _this.onModelAddedToStore;
      });
      this.store.removeListener('remove', function() {
        return _this.onModelRemovedFromStore;
      });
      return ModelQuery.__super__.dispose.call(this);
    };

    ModelQuery.prototype.where = function(filterObj) {
      this.filter = function(model) {
        var key, value, _ref;
        _ref = this.config.where;
        for (key in _ref) {
          value = _ref[key];
          if (model[key] !== value) {
            return false;
          }
        }
        return true;
      };
      if (this.length > 0) {
        this.run();
      }
      return this;
    };

    ModelQuery.prototype.run = function() {
      var model, _i, _len, _ref,
        _this = this;
      this.removeAll();
      this.store.on('add', function() {
        return _this.onModelAddedToStore;
      });
      this.store.on('remove', function() {
        return _this.onModelRemovedFromStore;
      });
      _ref = this.store.getAll();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        model = _ref[_i];
        this.onModelAddedToStore(this.store, model);
      }
      return this;
    };

    ModelQuery.prototype.onModelAddedToStore = function(store, model) {
      var _this = this;
      model.on('change', function() {
        return _this.onModelChange;
      });
      if (!model.is("ready")) {
        return;
      }
      if (this.filter(model)) {
        return this.add(model);
      }
    };

    ModelQuery.prototype.onModelRemovedFromStore = function(store, model) {
      var _this = this;
      model.removeListener('change', function() {
        return _this.onModelChange;
      });
      return this.remove(model);
    };

    ModelQuery.prototype.onModelChange = function(model, change) {
      if (!this._doesQueryCareAboutState(model)) {
        return;
      }
      if (!this._doesQueryCareAboutChange(change.property)) {
        return;
      }
      if (this.filter(model)) {
        this.add(model);
        return this.sort(this.sortByFunc);
      } else {
        return this.remove(model);
      }
    };

    ModelQuery.prototype._doesQueryCareAboutState = function(model) {
      return !model.isIn("empty,loading".split(','));
    };

    ModelQuery.prototype._doesQueryCareAboutChange = function(attrName) {
      var key, _ref;
      if (!(this.config.where || ((_ref = this.config.sort) != null ? _ref.by : void 0))) {
        return true;
      }
      for (key in this.config.where) {
        if (key === attrName) {
          return true;
        }
      }
      if (this.config.sort.by === attrName) {
        return true;
      }
      return false;
    };

    ModelQuery.prototype.add = function(model) {
      var idx;
      if (this.contains(model)) {
        return;
      }
      idx = null;
      return ModelQuery.__super__.add.call(this, model, idx);
    };

    ModelQuery.prototype.remove = function(model) {
      if (!this.contains(model)) {
        return;
      }
      return ModelQuery.__super__.remove.call(this, model);
    };

    return ModelQuery;

  })(Collection);

  module.exports = ModelQuery;

}).call(this);
