// Generated by CoffeeScript 1.3.3
(function() {
  var Attribute, AttributeFactory, Base, Model, Stateful, Store, TypeRegister, uuid, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('./core').Base;

  Store = require('./Store');

  _ref = require('./attributes'), AttributeFactory = _ref.AttributeFactory, Attribute = _ref.Attribute;

  TypeRegister = require('./TypeRegister');

  _ = require('underscore');

  uuid = require('node-uuid');

  Stateful = require('stateful');

  Model = (function(_super) {

    __extends(Model, _super);

    Model.StateChart({
      New: {
        transitions: [
          {
            destination: 'Existing',
            action: 'save'
          }
        ],
        methods: {
          save: function() {
            return Stateful.Success;
          }
        }
      },
      Existing: {
        transitions: [
          {
            destination: 'Loaded',
            action: 'parse'
          }
        ],
        methods: {
          parse: function() {
            return this.super_parse.apply(this, arguments);
          }
        },
        paths: {
          Loaded: {
            transitions: [
              {
                destination: 'Editing',
                action: 'startEdit'
              }
            ],
            methods: {
              startEdit: function() {
                return Stateful.Success;
              }
            },
            paths: {
              Editing: {
                transitions: [
                  {
                    destination: 'Existing/Loaded',
                    action: 'cancel'
                  }, {
                    destination: 'Dirty',
                    action: 'save'
                  }
                ],
                methods: {
                  cancel: function() {
                    return Stateful.Success;
                  },
                  save: function() {
                    return Stateful.Success;
                  },
                  set: function(name, value) {
                    var attribute;
                    attribute = this.attributes[name];
                    return attribute != null ? attribute.set(value) : void 0;
                  }
                },
                paths: {
                  Dirty: {
                    transitions: [
                      {
                        destination: 'Existing/Loaded',
                        action: 'commit'
                      }, {
                        destination: 'Existing/Loaded',
                        action: 'rollback'
                      }
                    ],
                    methods: {
                      commit: function() {
                        return Stateful.Success;
                      },
                      rollback: function() {
                        return Stateful.Success;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    });

    Model.create = function() {
      return this.prototype.store.create.apply(this.prototype.store, arguments);
    };

    Model.resolve = function() {
      return this.prototype.store.resolve.apply(this.prototype.store, arguments);
    };

    Model.get = function() {
      return this.prototype.store.get.apply(this.prototype.store, arguments);
    };

    Model.find = function() {
      return this.prototype.store.find.apply(this.prototype.store, arguments);
    };

    Model["delete"] = function() {
      return this.prototype.store["delete"].apply(this.prototype.store, arguments);
    };

    Model._attribute = function(kind, name, type, config) {
      if (config == null) {
        config = {};
      }
      if (this.prototype._schema == null) {
        this.prototype._schema = {};
      }
      return this.prototype._schema[name] = _.extend(config, {
        kind: kind,
        name: name,
        type: type
      });
    };

    Model.property = function(name, type, config) {
      return this._attribute('property', name, type, config);
    };

    Model.reference = function(name, type, config) {
      return this._attribute('reference', name, type, config);
    };

    Model.collection = function(name, type, config) {
      return this._attribute('collection', name, type, config);
    };

    Model.registerModel = function(name) {
      this.prototype.store = new Store({
        type: this
      });
      return TypeRegister.addModel(name, this);
    };

    function Model(config) {
      Model.__super__.constructor.apply(this, arguments);
      if (this.config.state == null) {
        throw new Error("Must use defined methods for creating new models.");
      }
      this.state = this.config.state;
      this.buildAttributes();
      this.parse(config.data, config.metadata);
      this.store.registerModel(this);
    }

    Model.prototype.buildAttributes = function() {
      var attr, config, name, _ref1, _results,
        _this = this;
      this.attributes = {};
      console.log("Building Model: " + this.constructor.name);
      if (this._schema['id'] == null) {
        this._schema['id'] = {
          kind: 'property',
          name: 'id',
          type: 'String'
        };
      }
      _ref1 = this._schema;
      _results = [];
      for (name in _ref1) {
        config = _ref1[name];
        console.log("building attribute for " + name);
        Object.defineProperty(this, name, {
          get: function() {
            return this.get(name);
          },
          set: function(value) {
            return this.set(name, value);
          }
        });
        attr = AttributeFactory.createAttribute(config.kind, _.extend(config, {
          owner: this
        }));
        this.attributes[name] = attr;
        attr.on("change", function() {
          return _this.onAttributeChange;
        });
        _results.push(attr.on("stateChange", function() {
          return _this.onAttributeStateChange;
        }));
      }
      return _results;
    };

    Model.prototype.dispose = function() {
      var _this = this;
      Model.__super__.dispose.apply(this, arguments);
      return _.each(this.attributes, function(attr) {
        return attr.dispose();
      });
    };

    Model.prototype.generateId = function() {
      var typeString;
      typeString = this.attributes['id'].typeString;
      if (typeString === 'String') {
        return this.updateAttribute('id', uuid.v1());
      } else if (typeString === 'Number') {
        return this.updateAttribute('id', _.uniqueId());
      } else {
        throw new Error("Missing id on " + this);
      }
    };

    Model.prototype.parse = function(jsonObj, metadata) {
      var attribute, changes, name, value;
      changes = (function() {
        var _results;
        _results = [];
        for (name in jsonObj) {
          value = jsonObj[name];
          attribute = this.attributes[name];
          _results.push(this.updateAttribute(attribute, value, metadata));
        }
        return _results;
      }).call(this);
      changes = _.reject(changes, function(item) {
        return !(item != null);
      });
      return this.onChange(changes, metadata);
    };

    Model.prototype.updateAttribute = function(nameOrAttribute, value, metadata) {
      var attribute;
      if (typeof nameOrAttribute === 'string') {
        attribute = this.attributes[nameOrAttribute];
      } else if (nameOrAttribute instanceof Attribute) {
        attribute = nameOrAttribute;
      } else {
        throw new Error("Missing attribute: " + nameOrAttribute + " from " + (_.keys(this.attributes)));
      }
      console.log("- updating " + attribute.name + " to " + value);
      return attribute.update(value, metadata);
    };

    Model.prototype.onChange = function(changes, metadata) {
      return this.emit('change', changes, metadata);
    };

    Model.prototype.onAttributeChange = function(attribute, newValue, oldValue, metadata) {
      var changeObj;
      changeObj = {
        property: attribute.name,
        newValue: newValue,
        oldValue: oldValue,
        metadata: metadata
      };
      return this.emit("change:" + attribute.name, changeObj);
    };

    Model.prototype.get = function(name) {
      var _ref1;
      return (_ref1 = this.attributes[name]) != null ? _ref1.get() : void 0;
    };

    Model.prototype.toString = function() {
      var sup, _ref1;
      sup = Model.__super__.toString.apply(this, arguments);
      if ((_ref1 = this.attributes['id']) != null ? _ref1.is('Loaded') : void 0) {
        sup += "[" + this.id + "]";
      }
      return sup;
    };

    Model.prototype.toJSON = function() {
      var attr, name, values, _ref1;
      values = {};
      _ref1 = this.attributes;
      for (name in _ref1) {
        attr = _ref1[name];
        values[attr.name] = attr.raw();
      }
      return values;
    };

    return Model;

  })(Base);

  module.exports = Model;

}).call(this);
