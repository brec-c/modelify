// Generated by CoffeeScript 1.3.3
(function() {
  var Attribute, Collection,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Attribute = require('./Attribute');

  Collection = require('../core').Collection;

  Collection = (function(_super) {

    __extends(Collection, _super);

    Collection.registerAttribute('collection');

    function Collection(config) {
      Collection.__super__.constructor.call(this, config);
      this.store = this.type.store;
      if (this.store == null) {
        throw new Error("Invalid type for reference.");
      }
    }

    Collection.prototype.raw = function() {
      if (this.value != null) {
        return _.pluck(this.value, 'id');
      } else {
        return [];
      }
    };

    Collection.prototype._applyValue = function(refs) {
      var idx, isDiff, ref, vals, _i, _len;
      vals = this.store.resolve(refs);
      if (this.value) {
        if (this.value.length === refs.length) {
          isDiff = false;
          for (idx = _i = 0, _len = refs.length; _i < _len; idx = ++_i) {
            ref = refs[idx];
            if (ref.id !== this.value[idx].id) {
              isDiff = true;
            }
          }
          if (!isDiff) {
            return false;
          }
        }
      }
      this.previous = this.value;
      this.value = new Collection({
        items: vals
      });
      return true;
    };

    return Collection;

  })(Attribute);

  module.exports = Collection;

}).call(this);
