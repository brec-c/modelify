// Generated by CoffeeScript 1.3.3
(function() {
  var Attribute, Property, TypeRegister,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Attribute = require('./Attribute');

  TypeRegister = require('../TypeRegister');

  Property = (function(_super) {

    __extends(Property, _super);

    function Property() {
      return Property.__super__.constructor.apply(this, arguments);
    }

    Property.registerAttribute('property');

    Property.prototype._applyValue = function(value) {
      var newValue, oldValue;
      oldValue = this.value;
      newValue = TypeRegister.assertIsType(value, this.type);
      if (newValue !== oldValue) {
        this.previous = oldValue;
        this.value = newValue;
        return true;
      }
      return false;
    };

    return Property;

  })(Attribute);

  module.exports = Property;

}).call(this);
