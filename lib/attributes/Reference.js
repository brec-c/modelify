// Generated by CoffeeScript 1.3.3
(function() {
  var Attribute, Reference, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Attribute = require('./Attribute');

  util = require('util');

  Reference = (function(_super) {

    __extends(Reference, _super);

    Reference.registerAttribute('reference');

    function Reference(config) {
      Reference.__super__.constructor.call(this, config);
      this.store = this.type.prototype.store;
      if (this.store == null) {
        throw new Error("Invalid type (" + this.typeString + ") for reference.");
      }
    }

    Reference.prototype.raw = function() {
      return "ModelType: " + this.value.constructor.name + ", id: " + this.value.id;
    };

    Reference.prototype._applyValue = function(ref) {
      var newValue, oldValue;
      oldValue = this.value;
      newValue = this.store.resolve(ref);
      if (newValue !== oldValue) {
        this.previous = oldValue;
        this.value = newValue;
        return true;
      }
      return false;
    };

    return Reference;

  })(Attribute);

  module.exports = Reference;

}).call(this);
