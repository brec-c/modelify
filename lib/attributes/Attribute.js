// Generated by CoffeeScript 1.3.3
(function() {
  var Attribute, Base, TypeRegister,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('../core').Base;

  TypeRegister = require('../TypeRegister');

  Attribute = (function(_super) {

    __extends(Attribute, _super);

    Attribute.StateChart({
      Unloaded: {
        transitions: [
          {
            destination: 'Loaded',
            action: 'update'
          }
        ],
        methods: {
          update: function(value, metadata) {
            var isDiff;
            isDiff = this._applyValue(value);
            if (isDiff) {
              this._emitChange(this.value, this.previous, metadata);
            }
            return {
              name: this.name,
              value: this.value,
              previous: this.previous
            };
          }
        },
        paths: {
          Loaded: {
            transitions: [
              {
                destination: 'Dirty',
                action: 'set'
              }
            ],
            methods: {
              set: function(value) {
                var isDiff;
                if (this.readonly) {
                  throw new Error("Can't set a readonly attribute.");
                }
                isDiff = this._applyValue(value);
                if (isDiff) {
                  return this._emitChange(this.value, this.previous);
                }
              }
            },
            paths: {
              Dirty: {
                transitions: [
                  {
                    destination: 'Unloaded/Loaded',
                    action: 'commit'
                  }, {
                    destination: 'Unloaded/Loaded',
                    action: 'rollback'
                  }
                ],
                methods: {
                  commit: function() {
                    return Stateful.Success;
                  },
                  rollback: function() {
                    this.value = this.previous;
                    return this._emitChange(this.value);
                  }
                }
              }
            }
          }
        }
      }
    });

    Attribute.define("name", {
      get: function() {
        return this.config.name;
      }
    });

    Attribute.define("owner", {
      get: function() {
        return this.config.owner;
      }
    });

    Attribute.define("readonly", {
      get: function() {
        if (this.config.readonly != null) {
          return this.config.readonly;
        } else {
          return false;
        }
      }
    });

    Attribute.define("required", {
      get: function() {
        if (this.config.isRequired != null) {
          return this.config.isRequired;
        } else {
          return false;
        }
      }
    });

    Attribute.define("transient", {
      get: function() {
        if (this.config.isTransient != null) {
          return this.config.isTransient;
        } else {
          return false;
        }
      }
    });

    Attribute.define('typeString', {
      get: function() {
        return this.config.type;
      }
    });

    Attribute.define('type', {
      get: function() {
        if (TypeRegister.isModel(this.config.type)) {
          return TypeRegister.getModel(this.config.type);
        } else {
          return TypeRegister.resolve(this.config.type);
        }
      }
    });

    Attribute.registerAttribute = function(name) {
      return TypeRegister.addAttribute(name, this);
    };

    function Attribute(config) {
      Attribute.__super__.constructor.call(this, config);
      this.state = 'Unloaded';
      this.value = void 0;
      this.previous = void 0;
    }

    Attribute.prototype.get = function() {
      return this.value;
    };

    Attribute.prototype.raw = function() {
      return this.value;
    };

    Attribute.prototype._applyValue = function(value) {
      throw new Error("Override _applyValue on " + this);
    };

    Attribute.prototype._emitChange = function(newValue, oldValue, metadata) {
      return this.emit("change", this, newValue, oldValue, metadata);
    };

    return Attribute;

  })(Base);

  module.exports = Attribute;

}).call(this);
